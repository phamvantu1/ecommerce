package com.electro.quynh;

import com.electro.dto.client.ClientCartRequest;
import com.electro.dto.client.ClientCartVariantRequest;
import com.electro.dto.client.UpdateQuantityType;
import com.electro.entity.cart.Cart;
import com.electro.entity.cart.CartVariant;
import com.electro.entity.cart.CartVariantKey;
import com.electro.entity.product.Variant;
import com.electro.mapper.client.ClientCartMapper;
import com.electro.repository.authentication.UserRepository;
import com.electro.repository.inventory.DocketVariantRepository;
import com.electro.repository.product.VariantRepository;
import com.electro.repository.promotion.PromotionRepository;
import com.electro.mapper.promotion.PromotionMapper;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ClientCartMapperTest {

    // Mock c√°c repository v√† mapper c·∫ßn thi·∫øt
    private VariantRepository variantRepository;
    private UserRepository userRepository;
    private DocketVariantRepository docketVariantRepository;
    private PromotionRepository promotionRepository;
    private PromotionMapper promotionMapper;

    // Class c·∫ßn test
    private ClientCartMapper clientCartMapper;

    // Setup mock tr∆∞·ªõc m·ªói test
    @BeforeEach
    void setUp() {
        variantRepository = mock(VariantRepository.class);
        userRepository = mock(UserRepository.class);
        docketVariantRepository = mock(DocketVariantRepository.class);
        promotionRepository = mock(PromotionRepository.class);
        promotionMapper = mock(PromotionMapper.class);

        // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng test
        clientCartMapper = new ClientCartMapper(
                userRepository,
                variantRepository,
                docketVariantRepository,
                promotionRepository,
                promotionMapper
        );
    }

    // Test th√™m m·ªõi s·∫£n ph·∫©m v√†o gi·ªè h√†ng r·ªóng
    @Test
    void testPartialUpdate_Testcase1() {
        System.out.println("‚úÖ Test: Th√™m m·ªõi s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr·ªëng");

        Cart cart = new Cart(); // Gi·ªè h√†ng m·ªõi
        cart.setCartVariants(new HashSet<>());

        Variant variant = new Variant(); // T·∫°o variant gi·∫£ l·∫≠p
        variant.setId(1L);
        when(variantRepository.getById(1L)).thenReturn(variant);

        // Y√™u c·∫ßu th√™m s·∫£n ph·∫©m v·ªõi variantId = 1 v√† quantity = 2
        ClientCartVariantRequest itemRequest = new ClientCartVariantRequest();
        itemRequest.setVariantId(1L);
        itemRequest.setQuantity(2);

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(itemRequest));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE); // Ghi ƒë√®
        request.setStatus(1);

        Cart result = clientCartMapper.partialUpdate(cart, request);

        System.out.println("üõí K·∫øt qu·∫£ s·ªë l∆∞·ª£ng item trong gi·ªè: " + result.getCartVariants().size());

        assertEquals(1, result.getCartVariants().size());
        CartVariant newItem = result.getCartVariants().iterator().next();
        assertEquals(2, newItem.getQuantity());
        assertEquals(1L, newItem.getVariant().getId());
        assertNotNull(newItem.getCartVariantKey());
    }

    // Test c·∫≠p nh·∫≠t l·∫°i quantity v·ªõi ki·ªÉu OVERRIDE (ghi ƒë√®)
    @Test
    void testPartialUpdate_Testcase2() {
        System.out.println("‚úÖ Test: Override s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè");

        Variant variant = new Variant(); variant.setId(1L);

        CartVariant cartVariant = new CartVariant(); // C√≥ s·∫µn trong gi·ªè
        cartVariant.setVariant(variant);
        cartVariant.setQuantity(1); // Quantity ban ƒë·∫ßu
        cartVariant.setCartVariantKey(new CartVariantKey(1L, 1L));

        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>(Set.of(cartVariant)));

        when(variantRepository.getById(1L)).thenReturn(variant);

        ClientCartVariantRequest requestItem = new ClientCartVariantRequest();
        requestItem.setVariantId(1L);
        requestItem.setQuantity(5); // Ghi ƒë√® th√†nh 5

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(requestItem));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        clientCartMapper.partialUpdate(cart, request);

        System.out.println("üîÅ S·ªë l∆∞·ª£ng sau override: " + cartVariant.getQuantity());

        assertEquals(5, cartVariant.getQuantity());
    }

    // Test c·ªông th√™m s·ªë l∆∞·ª£ng (INCREMENTAL)
    @Test
    void testPartialUpdate_Testcase3() {
        System.out.println("‚úÖ Test: TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè (INCREMENT)");

        Variant variant = new Variant(); variant.setId(2L);

        CartVariant cartVariant = new CartVariant();
        cartVariant.setVariant(variant);
        cartVariant.setQuantity(2); // Quantity hi·ªán t·∫°i
        cartVariant.setCartVariantKey(new CartVariantKey(1L, 2L));

        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>(Set.of(cartVariant)));

        when(variantRepository.getById(2L)).thenReturn(variant);

        ClientCartVariantRequest requestItem = new ClientCartVariantRequest();
        requestItem.setVariantId(2L);
        requestItem.setQuantity(3); // C·ªông th√™m 3

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(requestItem));
        request.setUpdateQuantityType(UpdateQuantityType.INCREMENTAL);

        clientCartMapper.partialUpdate(cart, request);

        System.out.println("üîº S·ªë l∆∞·ª£ng sau c·ªông d·ªìn: " + cartVariant.getQuantity());

        assertEquals(5, cartVariant.getQuantity());
    }

    // Test c·∫≠p nh·∫≠t s·∫£n ph·∫©m ƒë√£ c√≥ + th√™m s·∫£n ph·∫©m m·ªõi
    @Test
    void testPartialUpdate_Testcase4() {
        System.out.println("‚úÖ Test: V·ª´a c·∫≠p nh·∫≠t v·ª´a th√™m s·∫£n ph·∫©m v√†o gi·ªè");

        Variant variant1 = new Variant(); variant1.setId(1L);
        Variant variant2 = new Variant(); variant2.setId(2L);

        // S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè
        CartVariant existing = new CartVariant();
        existing.setVariant(variant1);
        existing.setQuantity(2);
        existing.setCartVariantKey(new CartVariantKey(1L, 1L));

        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>(Set.of(existing)));

        when(variantRepository.getById(2L)).thenReturn(variant2);

        // Y√™u c·∫ßu update variant1 + th√™m m·ªõi variant2
        ClientCartVariantRequest item1 = new ClientCartVariantRequest();
        item1.setVariantId(1L); item1.setQuantity(5);

        ClientCartVariantRequest item2 = new ClientCartVariantRequest();
        item2.setVariantId(2L); item2.setQuantity(3);

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(item1, item2));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        Cart result = clientCartMapper.partialUpdate(cart, request);

        System.out.println("üßæ S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè sau update: " + result.getCartVariants().size());

        assertEquals(2, result.getCartVariants().size());
        assertTrue(result.getCartVariants().stream().anyMatch(cv -> cv.getVariant().getId().equals(2L)));
        assertTrue(result.getCartVariants().stream().anyMatch(cv -> cv.getQuantity() == 5));
    }

    // Test khi variant kh√¥ng t·ªìn t·∫°i trong database
    @Test
    void testPartialUpdate_Testcase5() {
        System.out.println("‚úÖ Test: Tr∆∞·ªùng h·ª£p Variant kh√¥ng t·ªìn t·∫°i trong DB");

        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>());

        ClientCartVariantRequest itemRequest = new ClientCartVariantRequest();
        itemRequest.setVariantId(99L);
        itemRequest.setQuantity(1);

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(itemRequest));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        when(variantRepository.getById(99L)).thenThrow(new RuntimeException("Variant not found"));

        Exception exception = assertThrows(RuntimeException.class, () -> clientCartMapper.partialUpdate(cart, request));

        System.out.println("üö® ƒê√£ b·∫Øt ƒë∆∞·ª£c exception nh∆∞ mong ƒë·ª£i: " + exception.getMessage());
    }

    // Test tr∆∞·ªùng h·ª£p request kh√¥ng ch·ª©a cartItems
    @Test
    void testPartialUpdate_Testcase6() {
        System.out.println("‚ùå Request kh√¥ng ch·ª©a cartItems");

        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>());

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(null); // kh√¥ng c√≥ cartItems

        assertThrows(NullPointerException.class, () -> clientCartMapper.partialUpdate(cart, request));
    }
    // ‚úÖ Test tr∆∞·ªùng h·ª£p variantId b·ªã null trong request (kh√¥ng h·ª£p l·ªá)
    @Test
    void testPartialUpdate_Testcase7() {
        System.out.println("‚ùå variantId b·ªã null trong ClientCartVariantRequest");

        // T·∫°o cart tr·ªëng (ch∆∞a c√≥ s·∫£n ph·∫©m n√†o)
        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>());

        // T·∫°o request ch·ª©a item c√≥ variantId = null
        ClientCartVariantRequest item = new ClientCartVariantRequest();
        item.setVariantId(null); // ‚ùå l·ªói ·ªü ƒë√¢y
        item.setQuantity(1);

        // T·∫°o request ch√≠nh g·ª≠i l√™n mapper
        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(item));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        // Mong ƒë·ª£i mapper n√©m ra NullPointerException
        assertThrows(NullPointerException.class, () -> clientCartMapper.partialUpdate(cart, request));
    }

    // ‚úÖ Test khi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (quantity) kh√¥ng h·ª£p l·ªá (<= 0)
    @Test
    void testPartialUpdate_Testcase8() {
        System.out.println("‚ùå Quantity √¢m ho·∫∑c b·∫±ng 0");

        Cart cart = new Cart();
        cart.setCartVariants(new HashSet<>());

        // T·∫°o variant gi·∫£ l·∫≠p v·ªõi id = 1
        Variant variant = new Variant();
        variant.setId(1L);
        when(variantRepository.getById(1L)).thenReturn(variant);

        // T·∫°o item v·ªõi quantity = 0 (kh√¥ng h·ª£p l·ªá)
        ClientCartVariantRequest item = new ClientCartVariantRequest();
        item.setVariantId(1L);
        item.setQuantity(0); // ‚ùå quantity kh√¥ng h·ª£p l·ªá

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(item));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        // G·ªçi mapper
        Cart result = clientCartMapper.partialUpdate(cart, request);

        // ‚ùóÔ∏è Kh√¥ng th√™m s·∫£n ph·∫©m n√†o v√†o gi·ªè (do quantity kh√¥ng h·ª£p l·ªá)
        assertTrue(result.getCartVariants().isEmpty());
    }

    // ‚úÖ Test tr∆∞·ªùng h·ª£p truy·ªÅn cart null v√†o mapper
    @Test
    void testPartialUpdate_Testcase9() {
        System.out.println("‚ùå C·∫≠p nh·∫≠t s·∫£n ph·∫©m khi cart == null");

        // T·∫°o item h·ª£p l·ªá
        ClientCartVariantRequest item = new ClientCartVariantRequest();
        item.setVariantId(1L);
        item.setQuantity(2);

        // G√≥i item v√†o request
        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(item));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        // ‚ùóÔ∏è Truy·ªÅn cart = null -> mong ƒë·ª£i NullPointerException
        assertThrows(NullPointerException.class, () -> clientCartMapper.partialUpdate(null, request));
    }
    //‚úÖ Override s·ªë l∆∞·ª£ng nhi·ªÅu s·∫£n ph·∫©m c√πng l√∫c
    @Test
    void testPartialUpdate_Testcase10() {
        System.out.println("‚úÖ Override s·ªë l∆∞·ª£ng nhi·ªÅu s·∫£n ph·∫©m c√πng l√∫c");

        // Setup cart hi·ªán c√≥
        Cart cart = new Cart();
        Set<CartVariant> existingItems = new HashSet<>();

        Variant variant1 = new Variant(); variant1.setId(1L);
        Variant variant2 = new Variant(); variant2.setId(2L);

        CartVariant cv1 = new CartVariant(); cv1.setVariant(variant1); cv1.setQuantity(1);
        CartVariant cv2 = new CartVariant(); cv2.setVariant(variant2); cv2.setQuantity(3);

        existingItems.add(cv1);
        existingItems.add(cv2);
        cart.setCartVariants(existingItems);

        // C·∫≠p nh·∫≠t override m·ªõi cho nhi·ªÅu s·∫£n ph·∫©m
        ClientCartVariantRequest item1 = new ClientCartVariantRequest();
        item1.setVariantId(1L);
        item1.setQuantity(10);

        ClientCartVariantRequest item2 = new ClientCartVariantRequest();
        item2.setVariantId(2L);
        item2.setQuantity(20);

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(item1, item2));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        when(variantRepository.getById(1L)).thenReturn(variant1);
        when(variantRepository.getById(2L)).thenReturn(variant2);

        Cart updatedCart = clientCartMapper.partialUpdate(cart, request);

        assertEquals(2, updatedCart.getCartVariants().size());

        for (CartVariant cv : updatedCart.getCartVariants()) {
            if (cv.getVariant().getId().equals(1L)) {
                assertEquals(10, cv.getQuantity());
            } else if (cv.getVariant().getId().equals(2L)) {
                assertEquals(20, cv.getQuantity());
            }
        }
    }
    //‚ùå C·∫≠p nh·∫≠t s·∫£n ph·∫©m khi cart == null
    @Test
    void testPartialUpdate_Testcase11() {
        System.out.println("‚ùå C·∫≠p nh·∫≠t s·∫£n ph·∫©m khi cart == null");

        Variant variant = new Variant(); variant.setId(1L);
        when(variantRepository.getById(1L)).thenReturn(variant);

        ClientCartVariantRequest item = new ClientCartVariantRequest();
        item.setVariantId(1L);
        item.setQuantity(2);

        ClientCartRequest request = new ClientCartRequest();
        request.setCartItems(Set.of(item));
        request.setUpdateQuantityType(UpdateQuantityType.OVERRIDE);

        // Truy·ªÅn v√†o null cart
        assertThrows(NullPointerException.class, () -> clientCartMapper.partialUpdate(null, request));
    }

}
