package com.electro;

import com.electro.controller.client.ClientUserController;
import com.electro.dto.address.AddressRequest;
import com.electro.dto.authentication.UserResponse;
import com.electro.dto.client.ClientEmailSettingUserRequest;
import com.electro.dto.client.ClientPasswordSettingUserRequest;
import com.electro.dto.client.ClientPersonalSettingUserRequest;
import com.electro.dto.client.ClientPhoneSettingUserRequest;
import com.electro.entity.authentication.User;
import com.electro.mapper.authentication.UserMapper;
import com.electro.repository.authentication.UserRepository;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ClientUserControllerUnitTest {

    @InjectMocks
    private ClientUserController clientUserController;

    @Mock
    private UserRepository userRepository;

    @Mock
    private UserMapper userMapper;

    @Mock
    private PasswordEncoder passwordEncoder;

    @Mock
    private Authentication authentication;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    // test case 1: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng
    @Test
    void testGetUserInfo_WhenUserExists_ShouldReturnUserInfo() {
        // Gi·∫£ l·∫≠p ƒë·ªëi t∆∞·ª£ng Authentication tr·∫£ v·ªÅ t√™n ng∆∞·ªùi d√πng l√† "existingUser"
        when(authentication.getName()).thenReturn("existingUser");

        //T·∫°o ƒë·ªëi t∆∞·ª£ng User m√¥ ph·ªèng ng∆∞·ªùi d√πng t·ªìn t·∫°i trong h·ªá th·ªëng
        User user = new User();
        user.setUsername("existingUser");

        // T·∫°o ƒë·ªëi t∆∞·ª£ng UserResponse l√† k·∫øt qu·∫£ mong mu·ªën sau khi √°nh x·∫° t·ª´ User
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("existingUser");

        // Gi·∫£ l·∫≠p h√†nh vi c·ªßa userRepository: tr·∫£ v·ªÅ Optional ch·ª©a user n·∫øu t√¨m th·∫•y theo username
        when(userRepository.findByUsername("existingUser")).thenReturn(Optional.of(user));

        // Gi·∫£ l·∫≠p h√†nh vi c·ªßa userMapper: √°nh x·∫° User entity sang UserResponse DTO
        when(userMapper.entityToResponse(user)).thenReturn(userResponse);

        // G·ªçi ph∆∞∆°ng th·ª©c c·∫ßn ki·ªÉm th·ª≠ trong controller, truy·ªÅn v√†o authentication gi·∫£ l·∫≠p
        ResponseEntity<UserResponse> response = clientUserController.getUserInfo(authentication);

        // Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ: HTTP status ph·∫£i l√† 200 OK
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // ƒê·∫£m b·∫£o r·∫±ng body c·ªßa response kh√¥ng null
        assertNotNull(response.getBody());

        // ƒê·∫£m b·∫£o username trong response ƒë√∫ng nh∆∞ mong ƒë·ª£i
        assertEquals("existingUser", response.getBody().getUsername());
    }

    // test case 2: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i (ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i)
    @Test
    void testGetUserInfo_WhenUserDoesNotExist_ShouldThrowUsernameNotFoundException() {
        // Arrange: Gi·∫£ l·∫≠p authentication tr·∫£ v·ªÅ t√™n ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i
        when(authentication.getName()).thenReturn("nonExistentUser");

        // Gi·∫£ l·∫≠p repository tr·∫£ v·ªÅ Optional.empty() khi t√¨m user theo username
        when(userRepository.findByUsername("nonExistentUser")).thenReturn(Optional.empty());

        // Act & Assert: Ki·ªÉm tra r·∫±ng h√†m s·∫Ω n√©m UsernameNotFoundException n·∫øu kh√¥ng t√¨m th·∫•y user
        assertThrows(UsernameNotFoundException.class, () -> {
            clientUserController.getUserInfo(authentication);
        });

        // Verify: ƒê·∫£m b·∫£o r·∫±ng ph∆∞∆°ng th·ª©c t√¨m ki·∫øm ƒë√£ ƒë∆∞·ª£c g·ªçi ƒë√∫ng v·ªõi username
        verify(userRepository).findByUsername("nonExistentUser");
    }



    // test case 3: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th√†nh c√¥ng khi ng∆∞·ªùi d√πng t·ªìn t·∫°i
    @Test
    void testUpdatePersonalSetting_ShouldUpdateSuccessfully_WhenUserExists() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        when(authentication.getName()).thenReturn("existingUser");

        // üß™ T·∫°o d·ªØ li·ªáu ƒë·∫ßu v√†o gi·∫£ l·∫≠p t·ª´ client (y√™u c·∫ßu c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng)
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("existingUser");
        userRequest.setFullname("Updated Fullname");

        // üß™ Gi·∫£ l·∫≠p user hi·ªán t·∫°i ƒë∆∞·ª£c l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
        User existingUser = new User();
        existingUser.setUsername("existingUser");

        // üß™ T·∫°o UserResponse gi·∫£ l·∫≠p l√† k·∫øt qu·∫£ mong mu·ªën sau khi c·∫≠p nh·∫≠t
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("existingUser");
        userResponse.setFullname("Updated Fullname");

        // üîÅ Gi·∫£ l·∫≠p c√°c h√†nh vi repository v√† mapper
        when(userRepository.findByUsername("existingUser")).thenReturn(Optional.of(existingUser));
        when(userMapper.partialUpdate(existingUser, userRequest)).thenReturn(existingUser);
        when(userRepository.save(existingUser)).thenReturn(existingUser);
        when(userMapper.entityToResponse(existingUser)).thenReturn(userResponse);

        // üéØ G·ªçi ph∆∞∆°ng th·ª©c updatePersonalSetting trong controller
        ResponseEntity<UserResponse> response = clientUserController.updatePersonalSetting(authentication, userRequest);

        // ‚úÖ Ki·ªÉm tra HTTP status l√† 200 OK
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // ‚úÖ Ki·ªÉm tra response body kh√¥ng null
        assertNotNull(response.getBody());

        // ‚úÖ Ki·ªÉm tra th√¥ng tin tr·∫£ v·ªÅ ƒë√∫ng nh∆∞ k·ª≥ v·ªçng
        assertEquals("existingUser", response.getBody().getUsername());
        assertEquals("Updated Fullname", response.getBody().getFullname());
    }

    // test case 4: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i
    @Test
    void testUpdatePersonalSetting_ShouldThrowUsernameNotFoundException_WhenUserNotFound() {
        // Arrange: Gi·∫£ l·∫≠p authentication tr·∫£ v·ªÅ username kh√¥ng t·ªìn t·∫°i
        when(authentication.getName()).thenReturn("nonExistentUser");

        // Gi·∫£ l·∫≠p repository tr·∫£ v·ªÅ Optional r·ªóng khi t√¨m user theo username
        when(userRepository.findByUsername("nonExistentUser")).thenReturn(Optional.empty());

        // Act & Assert: Ki·ªÉm tra r·∫±ng ph∆∞∆°ng th·ª©c s·∫Ω n√©m ra UsernameNotFoundException
        assertThrows(UsernameNotFoundException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, new ClientPersonalSettingUserRequest());
        });

        // Verify: ƒê·∫£m b·∫£o r·∫±ng repository ƒë√£ ƒë∆∞·ª£c g·ªçi v·ªõi ƒë√∫ng username
        verify(userRepository).findByUsername("nonExistentUser");
    }

    // test case 5: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi username l√† null ho·∫∑c r·ªóng
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenUsernameIsNullOrEmpty() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ m·ªôt username b·∫•t k·ª≥
        when(authentication.getName()).thenReturn("testUsername");

        // --- Tr∆∞·ªùng h·ª£p 1: Username l√† null ---
        ClientPersonalSettingUserRequest userRequestWithNullUsername = new ClientPersonalSettingUserRequest();
        userRequestWithNullUsername.setUsername(null);
        userRequestWithNullUsername.setFullname("Test Fullname");

        // üéØ G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra exception ƒë∆∞·ª£c n√©m ra
        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, userRequestWithNullUsername);
        });
        // ‚úÖ Ki·ªÉm tra th√¥ng b√°o l·ªói
        assertEquals("Username cannot be null or empty", exception1.getMessage());

        // --- Tr∆∞·ªùng h·ª£p 2: Username l√† chu·ªói r·ªóng ---
        ClientPersonalSettingUserRequest userRequestWithEmptyUsername = new ClientPersonalSettingUserRequest();
        userRequestWithEmptyUsername.setUsername("");
        userRequestWithEmptyUsername.setFullname("Test Fullname");

        // üéØ G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra exception ƒë∆∞·ª£c n√©m ra
        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, userRequestWithEmptyUsername);
        });
        // ‚úÖ Ki·ªÉm tra th√¥ng b√°o l·ªói
        assertEquals("Username cannot be null or empty", exception2.getMessage());
    }

    // test case 6: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th√†nh c√¥ng khi fullname h·ª£p l·ªá
    @Test
    void testUpdatePersonalSetting_ShouldUpdateSuccessfully_WhenFullnameIsValid() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username h·ª£p l·ªá
        when(authentication.getName()).thenReturn("validUsername");

        // üß™ T·∫°o d·ªØ li·ªáu ƒë·∫ßu v√†o v·ªõi fullname h·ª£p l·ªá
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("validUsername");
        userRequest.setFullname("Valid Fullname");

        // üß™ Gi·∫£ l·∫≠p user hi·ªán t·∫°i trong database
        User existingUser = new User();
        existingUser.setUsername("validUsername");

        // üß™ Chu·∫©n b·ªã UserResponse tr·∫£ v·ªÅ sau khi c·∫≠p nh·∫≠t
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("validUsername");
        userResponse.setFullname("Valid Fullname");

        // üîÅ Gi·∫£ l·∫≠p c√°c t∆∞∆°ng t√°c v·ªõi repository v√† mapper
        when(userRepository.findByUsername("validUsername")).thenReturn(Optional.of(existingUser));
        when(userMapper.partialUpdate(existingUser, userRequest)).thenReturn(existingUser);
        when(userRepository.save(existingUser)).thenReturn(existingUser);
        when(userMapper.entityToResponse(existingUser)).thenReturn(userResponse);

        // üéØ G·ªçi h√†m c·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n
        ResponseEntity<UserResponse> response = clientUserController.updatePersonalSetting(authentication, userRequest);

        // ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i HTTP tr·∫£ v·ªÅ l√† 200 OK
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // ‚úÖ Ki·ªÉm tra response body kh√¥ng null v√† d·ªØ li·ªáu ch√≠nh x√°c
        assertNotNull(response.getBody());
        assertEquals("validUsername", response.getBody().getUsername());
        assertEquals("Valid Fullname", response.getBody().getFullname());
    }

    // test case 7: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi fullname l√† null
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenFullnameIsNull() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username h·ª£p l·ªá
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ Gi·∫£ l·∫≠p UserRepository tr·∫£ v·ªÅ user t·ªìn t·∫°i
        User mockedUser = new User();
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(mockedUser));

        // üß™ T·∫°o request v·ªõi fullname l√† null
        ClientPersonalSettingUserRequest requestWithNullFullname = new ClientPersonalSettingUserRequest();
        requestWithNullFullname.setUsername("testUsername");
        requestWithNullFullname.setFullname(null);

        // üéØ G·ªçi h√†m update v√† ki·ªÉm tra n√©m ra IllegalArgumentException
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, requestWithNullFullname);
        });

        // ‚úÖ Ki·ªÉm tra th√¥ng b√°o l·ªói ƒë√∫ng nh∆∞ mong ƒë·ª£i
        assertEquals("Fullname cannot be null or empty", exception.getMessage());
    }

    // test case 8: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi fullname ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenFullnameContainsSpecialCharacters() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username h·ª£p l·ªá
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ T·∫°o request v·ªõi fullname ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng h·ª£p l·ªá
        ClientPersonalSettingUserRequest requestWithInvalidFullname = new ClientPersonalSettingUserRequest();
        requestWithInvalidFullname.setUsername("testUsername");
        requestWithInvalidFullname.setFullname("Invalid@Name!");

        // üéØ G·ªçi h√†m update v√† ki·ªÉm tra n√©m ra IllegalArgumentException
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, requestWithInvalidFullname);
        });

        // ‚úÖ Ki·ªÉm tra th√¥ng b√°o l·ªói ƒë√∫ng nh∆∞ mong ƒë·ª£i
        assertEquals("Fullname contains invalid characters", exception.getMessage());
    }

    // test case 9: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th√†nh c√¥ng khi gender h·ª£p l·ªá
    @Test
    void testUpdatePersonalSetting_ShouldUpdateSuccessfully_WhenGenderIsValid() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username h·ª£p l·ªá
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ T·∫°o d·ªØ li·ªáu ƒë·∫ßu v√†o v·ªõi gender h·ª£p l·ªá
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("testUsername");
        userRequest.setGender("Male");

        // üß™ Gi·∫£ l·∫≠p user hi·ªán t·∫°i trong database
        User existingUser = new User();
        existingUser.setUsername("testUsername");

        // üß™ Chu·∫©n b·ªã UserResponse tr·∫£ v·ªÅ sau khi c·∫≠p nh·∫≠t
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("testUsername");
        userResponse.setGender("Male");

        // üîÅ Gi·∫£ l·∫≠p c√°c t∆∞∆°ng t√°c v·ªõi repository v√† mapper
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(existingUser));
        when(userMapper.partialUpdate(existingUser, userRequest)).thenReturn(existingUser);
        when(userRepository.save(existingUser)).thenReturn(existingUser);
        when(userMapper.entityToResponse(existingUser)).thenReturn(userResponse);

        // üéØ G·ªçi h√†m c·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n
        ResponseEntity<UserResponse> response = clientUserController.updatePersonalSetting(authentication, userRequest);

        // ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i HTTP tr·∫£ v·ªÅ l√† 200 OK
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // ‚úÖ Ki·ªÉm tra response body kh√¥ng null v√† d·ªØ li·ªáu ch√≠nh x√°c
        assertNotNull(response.getBody());
        assertEquals("testUsername", response.getBody().getUsername());
        assertEquals("Male", response.getBody().getGender());
    }

    // test case 10: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi gender l√† null ho·∫∑c chu·ªói r·ªóng
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenGenderIsNullOrEmpty() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username h·ª£p l·ªá
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ Tr∆∞·ªùng h·ª£p 1: gender l√† null
        ClientPersonalSettingUserRequest requestWithNullGender = new ClientPersonalSettingUserRequest();
        requestWithNullGender.setUsername("testUsername");
        requestWithNullGender.setGender(null);

        // üéØ G·ªçi h√†m update v√† ki·ªÉm tra n√©m IllegalArgumentException v·ªõi th√¥ng b√°o ch√≠nh x√°c
        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, requestWithNullGender);
        });
        assertEquals("Gender cannot be null or empty", exception1.getMessage());

        // üß™ Tr∆∞·ªùng h·ª£p 2: gender l√† chu·ªói r·ªóng
        ClientPersonalSettingUserRequest requestWithEmptyGender = new ClientPersonalSettingUserRequest();
        requestWithEmptyGender.setUsername("testUsername");
        requestWithEmptyGender.setGender("");

        // üéØ G·ªçi h√†m update v√† ki·ªÉm tra n√©m IllegalArgumentException v·ªõi th√¥ng b√°o ch√≠nh x√°c
        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, requestWithEmptyGender);
        });
        assertEquals("Gender cannot be null or empty", exception2.getMessage());
    }

    // test case 11: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi gi√° tr·ªã gender kh√¥ng h·ª£p l·ªá
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenGenderIsInvalid() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username h·ª£p l·ªá
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ Tr∆∞·ªùng h·ª£p gender c√≥ gi√° tr·ªã kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i "Male", "Female", ...)
        ClientPersonalSettingUserRequest requestWithInvalidGender = new ClientPersonalSettingUserRequest();
        requestWithInvalidGender.setUsername("testUsername");
        requestWithInvalidGender.setGender("InvalidGender");

        // üéØ G·ªçi h√†m update v√† ki·ªÉm tra n√©m IllegalArgumentException v·ªõi th√¥ng b√°o ch√≠nh x√°c
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, requestWithInvalidGender);
        });
        assertEquals("Gender value is invalid", exception.getMessage());
    }

    // test case 12: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th√†nh c√¥ng khi ƒë·ªãa ch·ªâ h·ª£p l·ªá
    @Test
    void testUpdatePersonalSetting_ShouldUpdateSuccessfully_WhenAddressIsValid() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username "testUsername"
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ Gi·∫£ l·∫≠p d·ªØ li·ªáu ƒë·∫ßu v√†o AddressRequest v·ªõi th√¥ng tin ƒë·ªãa ch·ªâ h·ª£p l·ªá
        AddressRequest addressRequest = new AddressRequest();
        addressRequest.setLine("123 Main Street");
        addressRequest.setProvinceId(1L);
        addressRequest.setDistrictId(2L);
        addressRequest.setWardId(3L);

        // üß™ T·∫°o request c·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n, g√°n ƒë·ªãa ch·ªâ v√†o
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("testUsername");
        userRequest.setAddress(addressRequest);

        // üß™ Gi·∫£ l·∫≠p User t·ªìn t·∫°i trong repository
        User existingUser = new User();
        existingUser.setUsername("testUsername");

        // üß™ Gi·∫£ l·∫≠p ph·∫£n h·ªìi tr·∫£ v·ªÅ sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("testUsername");

        // üß™ Gi·∫£ l·∫≠p h√†nh vi c·ªßa c√°c ph∆∞∆°ng th·ª©c li√™n quan
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(existingUser));
        when(userMapper.partialUpdate(existingUser, userRequest)).thenReturn(existingUser);
        when(userRepository.save(existingUser)).thenReturn(existingUser);
        when(userMapper.entityToResponse(existingUser)).thenReturn(userResponse);

        // üéØ G·ªçi ph∆∞∆°ng th·ª©c updatePersonalSetting v√† ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ
        ResponseEntity<UserResponse> response = clientUserController.updatePersonalSetting(authentication, userRequest);

        // ‚úÖ Ki·ªÉm tra m√£ HTTP tr·∫£ v·ªÅ l√† 200 OK
        assertEquals(HttpStatus.OK, response.getStatusCode());
        // ‚úÖ Ki·ªÉm tra body tr·∫£ v·ªÅ kh√¥ng null
        assertNotNull(response.getBody());
        // ‚úÖ Ki·ªÉm tra username tr·∫£ v·ªÅ ƒë√∫ng v·ªõi username y√™u c·∫ßu c·∫≠p nh·∫≠t
        assertEquals("testUsername", response.getBody().getUsername());
    }

    // test case 13: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi ƒë·ªãa ch·ªâ l√† null
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenAddressIsNull() {
        // üß™ Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username "testUsername"
        when(authentication.getName()).thenReturn("testUsername");

        // üß™ T·∫°o request v·ªõi ƒë·ªãa ch·ªâ l√† null (kh√¥ng h·ª£p l·ªá)
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("testUsername");
        userRequest.setAddress(null);

        // üéØ G·ªçi ph∆∞∆°ng th·ª©c updatePersonalSetting v√† ki·ªÉm tra vi·ªác n√©m exception IllegalArgumentException v·ªõi th√¥ng b√°o ƒë√∫ng
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, userRequest);
        });

        // ‚úÖ Ki·ªÉm tra th√¥ng b√°o l·ªói ch√≠nh x√°c khi ƒë·ªãa ch·ªâ l√† null
        assertEquals("Address cannot be null", exception.getMessage());
    }

    // test case 14: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi ƒë·ªãa ch·ªâ kh√¥ng ƒë·∫ßy ƒë·ªß (thi·∫øu tr∆∞·ªùng line)
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenAddressIsIncomplete() {
        // Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username "testUsername"
        when(authentication.getName()).thenReturn("testUsername");

        // T·∫°o AddressRequest thi·∫øu tr∆∞·ªùng line (null)
        AddressRequest incompleteAddress = new AddressRequest();
        incompleteAddress.setLine(null); // Thi·∫øu line
        incompleteAddress.setProvinceId(1L);
        incompleteAddress.setDistrictId(2L);
        incompleteAddress.setWardId(3L);

        // T·∫°o request v·ªõi ƒë·ªãa ch·ªâ kh√¥ng ƒë·∫ßy ƒë·ªß
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("testUsername");
        userRequest.setAddress(incompleteAddress);

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra n√©m IllegalArgumentException v·ªõi th√¥ng b√°o "Address is incomplete"
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, userRequest);
        });

        // Ki·ªÉm tra th√¥ng b√°o l·ªói ƒë√∫ng
        assertEquals("Address is incomplete", exception.getMessage());
    }

    // test case 15: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t c√° nh√¢n th·∫•t b·∫°i khi ƒë·ªãa ch·ªâ ch·ª©a gi√° tr·ªã kh√¥ng h·ª£p l·ªá (v√≠ d·ª•: provinceId √¢m)
    @Test
    void testUpdatePersonalSetting_ShouldThrowException_WhenAddressHasInvalidValues() {
        // Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username "testUsername"
        when(authentication.getName()).thenReturn("testUsername");

        // T·∫°o AddressRequest v·ªõi gi√° tr·ªã provinceId kh√¥ng h·ª£p l·ªá (-1)
        AddressRequest invalidAddress = new AddressRequest();
        invalidAddress.setLine("123 Main Street");
        invalidAddress.setProvinceId(-1L); // Gi√° tr·ªã kh√¥ng h·ª£p l·ªá
        invalidAddress.setDistrictId(2L);
        invalidAddress.setWardId(3L);

        // T·∫°o request v·ªõi ƒë·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá
        ClientPersonalSettingUserRequest userRequest = new ClientPersonalSettingUserRequest();
        userRequest.setUsername("testUsername");
        userRequest.setAddress(invalidAddress);

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra n√©m IllegalArgumentException v·ªõi th√¥ng b√°o "Address contains invalid values"
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePersonalSetting(authentication, userRequest);
        });

        // Ki·ªÉm tra th√¥ng b√°o l·ªói ƒë√∫ng
        assertEquals("Address contains invalid values", exception.getMessage());
    }

    // test case 16: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng khi phone h·ª£p l·ªá
    @Test
    void testUpdatePhoneSetting_ShouldUpdateSuccessfully_WhenPhoneIsValid() {
        // Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ username "testUsername"
        when(authentication.getName()).thenReturn("testUsername");

        // T·∫°o ƒë·ªëi t∆∞·ª£ng request ƒë·∫ßu v√†o v·ªõi s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá
        ClientPhoneSettingUserRequest userRequest = new ClientPhoneSettingUserRequest();
        userRequest.setPhone("1234567890");

        // Gi·∫£ l·∫≠p m·ªôt User ƒëang t·ªìn t·∫°i trong h·ªá th·ªëng
        User existingUser = new User();
        existingUser.setUsername("testUsername");

        // T·∫°o UserResponse gi·∫£ ƒë·ªãnh l√† k·∫øt qu·∫£ tr·∫£ v·ªÅ sau c·∫≠p nh·∫≠t
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("testUsername");
        userResponse.setPhone("1234567890");

        // Gi·∫£ l·∫≠p qu√° tr√¨nh t√¨m ki·∫øm user theo username
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(existingUser));

        // Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t th√¥ng tin user t·ª´ request
        when(userMapper.partialUpdate(existingUser, userRequest)).thenReturn(existingUser);

        // Gi·∫£ l·∫≠p l∆∞u user v√†o database
        when(userRepository.save(existingUser)).thenReturn(existingUser);

        // Gi·∫£ l·∫≠p chuy·ªÉn ƒë·ªïi t·ª´ entity sang response DTO
        when(userMapper.entityToResponse(existingUser)).thenReturn(userResponse);

        // G·ªçi h√†m updatePhoneSetting() trong controller v√† l∆∞u k·∫øt qu·∫£ tr·∫£ v·ªÅ
        ResponseEntity<UserResponse> response = clientUserController.updatePhoneSetting(authentication, userRequest);

        // Ki·ªÉm tra HTTP status l√† 200 OK
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng null
        assertNotNull(response.getBody());

        // Ki·ªÉm tra username v√† phone trong response gi·ªëng v·ªõi d·ªØ li·ªáu ƒë·∫ßu v√†o
        assertEquals("testUsername", response.getBody().getUsername());
        assertEquals("1234567890", response.getBody().getPhone());
    }

    // test case 17: C·∫≠p nh·∫≠t c√†i ƒë·∫∑t s·ªë ƒëi·ªán tho·∫°i th·∫•t b·∫°i khi kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
// ƒê·∫ßu v√†o: Authentication tr·∫£ v·ªÅ "testUsername", nh∆∞ng kh√¥ng c√≥ User n√†o t∆∞∆°ng ·ª©ng trong database
// ƒê·∫ßu ra mong mu·ªën: N√©m ra UsernameNotFoundException
    @Test
    void testUpdatePhoneSetting_ShouldThrowUsernameNotFoundException_WhenUserNotFound() {
        // Gi·∫£ l·∫≠p Authentication tr·∫£ v·ªÅ t√™n ng∆∞·ªùi d√πng "testUsername"
        when(authentication.getName()).thenReturn("testUsername");

        // Gi·∫£ l·∫≠p kh√¥ng t√¨m th·∫•y User trong database
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.empty());

        // G·ªçi ph∆∞∆°ng th·ª©c updatePhoneSetting v√† ki·ªÉm tra xem c√≥ n√©m ra UsernameNotFoundException kh√¥ng
        assertThrows(UsernameNotFoundException.class, () -> {
            clientUserController.updatePhoneSetting(authentication, new ClientPhoneSettingUserRequest());
        });

        // X√°c minh r·∫±ng ph∆∞∆°ng th·ª©c findByUsername ƒë∆∞·ª£c g·ªçi ƒë√∫ng v·ªõi tham s·ªë "testUsername"
        verify(userRepository).findByUsername("testUsername");
    }

    // test case 18: C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i th·∫•t b·∫°i khi gi√° tr·ªã phone l√† null ho·∫∑c r·ªóng
// ƒê·∫ßu v√†o:
//   - Tr∆∞·ªùng h·ª£p 1: phone = null
//   - Tr∆∞·ªùng h·ª£p 2: phone = ""
// ƒê·∫ßu ra mong mu·ªën:
//   - N√©m ra IllegalArgumentException v·ªõi th√¥ng ƒëi·ªáp "Phone cannot be null or empty" trong c·∫£ hai tr∆∞·ªùng h·ª£p
    @Test
    void testUpdatePhoneSetting_ShouldThrowException_WhenPhoneIsNullOrEmpty() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Tr∆∞·ªùng h·ª£p 1: Phone l√† null
        ClientPhoneSettingUserRequest requestWithNullPhone = new ClientPhoneSettingUserRequest();
        requestWithNullPhone.setPhone(null);

        // Ki·ªÉm tra ngo·∫°i l·ªá cho phone = null
        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePhoneSetting(authentication, requestWithNullPhone);
        });
        assertEquals("Phone cannot be null or empty", exception1.getMessage());

        // Tr∆∞·ªùng h·ª£p 2: Phone l√† chu·ªói r·ªóng
        ClientPhoneSettingUserRequest requestWithEmptyPhone = new ClientPhoneSettingUserRequest();
        requestWithEmptyPhone.setPhone("");

        // Ki·ªÉm tra ngo·∫°i l·ªá cho phone = ""
        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePhoneSetting(authentication, requestWithEmptyPhone);
        });
        assertEquals("Phone cannot be null or empty", exception2.getMessage());
    }

// test case 19: C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i th·∫•t b·∫°i khi s·ªë ƒëi·ªán tho·∫°i ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá
// ƒê·∫ßu v√†o:
//   - phone = "123-ABC-7890" (ch·ª©a ch·ªØ c√°i v√† d·∫•u g·∫°ch ngang)
// ƒê·∫ßu ra mong mu·ªën:
//   - N√©m ra IllegalArgumentException v·ªõi th√¥ng b√°o "Phone contains invalid characters"
    @Test
    void testUpdatePhoneSetting_ShouldThrowException_WhenPhoneContainsInvalidCharacters() {
        // Mock Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Invalid phone number
        ClientPhoneSettingUserRequest requestWithInvalidPhone = new ClientPhoneSettingUserRequest();
        requestWithInvalidPhone.setPhone("123-ABC-7890");

        // Ki·ªÉm tra ngo·∫°i l·ªá n√©m ra khi s·ªë ƒëi·ªán tho·∫°i ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePhoneSetting(authentication, requestWithInvalidPhone);
        });
        assertEquals("Phone contains invalid characters", exception.getMessage());
    }

// test case 20: C·∫≠p nh·∫≠t email th√†nh c√¥ng khi email h·ª£p l·ªá
// ƒê·∫ßu v√†o:
//   - email = "test@example.com"
//   - username t·ª´ authentication = "testUsername"
//   - user t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu
// ƒê·∫ßu ra mong mu·ªën:
//   - Tr·∫£ v·ªÅ ResponseEntity<UserResponse> v·ªõi HTTP status 200 (OK)
//   - Th√¥ng tin email trong ph·∫£n h·ªìi l√† "test@example.com"
    @Test
    void testUpdateEmailSetting_ShouldUpdateSuccessfully_WhenEmailIsValid() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Gi·∫£ l·∫≠p d·ªØ li·ªáu ƒë·∫ßu v√†o
        ClientEmailSettingUserRequest userRequest = new ClientEmailSettingUserRequest();
        userRequest.setEmail("test@example.com");

        // Gi·∫£ l·∫≠p repository tr·∫£ v·ªÅ User
        User existingUser = new User();
        existingUser.setUsername("testUsername");

        // Gi·∫£ l·∫≠p ph·∫£n h·ªìi t·ª´ mapper
        UserResponse userResponse = new UserResponse();
        userResponse.setUsername("testUsername");
        userResponse.setEmail("test@example.com");

        // ƒê·ªãnh nghƒ©a h√†nh vi c·ªßa c√°c mock
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(existingUser));
        when(userMapper.partialUpdate(existingUser, userRequest)).thenReturn(existingUser);
        when(userRepository.save(existingUser)).thenReturn(existingUser);
        when(userMapper.entityToResponse(existingUser)).thenReturn(userResponse);

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra k·∫øt qu·∫£
        ResponseEntity<UserResponse> response = clientUserController.updateEmailSetting(authentication, userRequest);

        // Ki·ªÉm tra HTTP status v√† d·ªØ li·ªáu tr·∫£ v·ªÅ
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("testUsername", response.getBody().getUsername());
        assertEquals("test@example.com", response.getBody().getEmail());
    }

    // test case 21: N√©m UsernameNotFoundException khi kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
    @Test
    void testUpdateEmailSetting_ShouldThrowUsernameNotFoundException_WhenUserNotFound() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Gi·∫£ l·∫≠p kh√¥ng t√¨m th·∫•y User trong DB
        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.empty());

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra exception
        assertThrows(UsernameNotFoundException.class, () -> {
            clientUserController.updateEmailSetting(authentication, new ClientEmailSettingUserRequest());
        });

        // ƒê·∫£m b·∫£o repository ƒë∆∞·ª£c g·ªçi ƒë√∫ng
        verify(userRepository).findByUsername("testUsername");
    }

    //N√©m IllegalArgumentException khi email l√† null ho·∫∑c r·ªóng
// test case 22: C·∫≠p nh·∫≠t email th·∫•t b·∫°i khi email l√† null ho·∫∑c chu·ªói r·ªóng
// ƒê·∫ßu v√†o:
//   - email = null (tr∆∞·ªùng h·ª£p 1)
//   - email = "" (tr∆∞·ªùng h·ª£p 2)
//   - username t·ª´ authentication = "testUsername"
// ƒê·∫ßu ra mong mu·ªën:
//   - Ph∆∞∆°ng th·ª©c n√©m ra IllegalArgumentException v·ªõi message "Email cannot be null or empty"
    @Test
    void testUpdateEmailSetting_ShouldThrowException_WhenEmailIsNullOrEmpty() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Tr∆∞·ªùng h·ª£p 1: Email l√† null
        ClientEmailSettingUserRequest requestWithNullEmail = new ClientEmailSettingUserRequest();
        requestWithNullEmail.setEmail(null);

        // Ki·ªÉm tra ngo·∫°i l·ªá khi email l√† null
        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updateEmailSetting(authentication, requestWithNullEmail);
        });
        assertEquals("Email cannot be null or empty", exception1.getMessage());

        // Tr∆∞·ªùng h·ª£p 2: Email l√† chu·ªói r·ªóng
        ClientEmailSettingUserRequest requestWithEmptyEmail = new ClientEmailSettingUserRequest();
        requestWithEmptyEmail.setEmail("");

        // Ki·ªÉm tra ngo·∫°i l·ªá khi email l√† chu·ªói r·ªóng
        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updateEmailSetting(authentication, requestWithEmptyEmail);
        });
        assertEquals("Email cannot be null or empty", exception2.getMessage());
    }


    // test case 23: C·∫≠p nh·∫≠t email th·∫•t b·∫°i khi email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
// ƒê·∫ßu v√†o:
//   - email = "invalid-email" (kh√¥ng c√≥ ƒë·ªãnh d·∫°ng email h·ª£p l·ªá)
//   - username t·ª´ authentication = "testUsername"
// ƒê·∫ßu ra mong mu·ªën:
//   - Ph∆∞∆°ng th·ª©c n√©m ra IllegalArgumentException v·ªõi message "Email format is invalid"
    @Test
    void testUpdateEmailSetting_ShouldThrowException_WhenEmailIsInvalid() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Email kh√¥ng h·ª£p l·ªá
        ClientEmailSettingUserRequest requestWithInvalidEmail = new ClientEmailSettingUserRequest();
        requestWithInvalidEmail.setEmail("invalid-email");

        // Ki·ªÉm tra ngo·∫°i l·ªá khi email kh√¥ng h·ª£p l·ªá
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updateEmailSetting(authentication, requestWithInvalidEmail);
        });
        assertEquals("Email format is invalid", exception.getMessage());
    }

// test case 24: C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng khi m·∫≠t kh·∫©u c≈© ƒë√∫ng
// ƒê·∫ßu v√†o:
//   - username trong authentication: "testUsername"
//   - oldPassword: "correctOldPassword" (ƒë√∫ng m·∫≠t kh·∫©u c≈© c·ªßa user)
//   - newPassword: "newPassword" (m·∫≠t kh·∫©u m·ªõi h·ª£p l·ªá)
// ƒê·∫ßu ra mong mu·ªën:
//   - HTTP Status 200 OK
//   - Response body l√† m·ªôt ObjectNode kh√¥ng r·ªóng (ƒë·∫°i di·ªán cho ph·∫£n h·ªìi th√†nh c√¥ng)
    @Test
    void testUpdatePasswordSetting_ShouldUpdateSuccessfully_WhenOldPasswordIsCorrect() throws Exception {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Gi·∫£ l·∫≠p d·ªØ li·ªáu ƒë·∫ßu v√†o v·ªõi m·∫≠t kh·∫©u c≈© v√† m·∫≠t kh·∫©u m·ªõi
        ClientPasswordSettingUserRequest userRequest = new ClientPasswordSettingUserRequest();
        userRequest.setOldPassword("correctOldPassword");
        userRequest.setNewPassword("newPassword");

        // Gi·∫£ l·∫≠p repository tr·∫£ v·ªÅ user t·ªìn t·∫°i v·ªõi m·∫≠t kh·∫©u m√£ h√≥a
        User existingUser = new User();
        existingUser.setUsername("testUsername");
        existingUser.setPassword("encodedOldPassword");

        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(existingUser));
        // Gi·∫£ l·∫≠p so s√°nh m·∫≠t kh·∫©u c≈© ƒë√∫ng
        when(passwordEncoder.matches("correctOldPassword", "encodedOldPassword")).thenReturn(true);
        // Gi·∫£ l·∫≠p m√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        when(passwordEncoder.encode("newPassword")).thenReturn("encodedNewPassword");

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ
        ResponseEntity<ObjectNode> response = clientUserController.updatePasswordSetting(authentication, userRequest);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().isObject());
    }

// test case 25: C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th·∫•t b·∫°i khi kh√¥ng t√¨m th·∫•y user theo username trong authentication
// ƒê·∫ßu v√†o:
//   - username trong authentication: "nonExistentUser" (user kh√¥ng t·ªìn t·∫°i trong database)
//   - ClientPasswordSettingUserRequest: b·∫•t k·ª≥ (·ªü ƒë√¢y d√πng m·∫∑c ƒë·ªãnh kh√¥ng ch·ª©a d·ªØ li·ªáu)
// ƒê·∫ßu ra mong mu·ªën:
//   - N√©m ra UsernameNotFoundException do kh√¥ng t√¨m th·∫•y user
    @Test
    void testUpdatePasswordSetting_ShouldThrowUsernameNotFoundException_WhenUserNotFound() {
        // Gi·∫£ l·∫≠p Authentication v·ªõi username kh√¥ng t·ªìn t·∫°i
        when(authentication.getName()).thenReturn("nonExistentUser");

        // Gi·∫£ l·∫≠p repository tr·∫£ v·ªÅ Optional.empty() nghƒ©a l√† user kh√¥ng t·ªìn t·∫°i
        when(userRepository.findByUsername("nonExistentUser")).thenReturn(Optional.empty());

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra n√©m ra UsernameNotFoundException
        assertThrows(UsernameNotFoundException.class, () -> {
            clientUserController.updatePasswordSetting(authentication, new ClientPasswordSettingUserRequest());
        });
    }

// test case 26: N√©m Exception khi m·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng
// ƒê·∫ßu v√†o:
//   - username trong authentication: "testUsername"
//   - ClientPasswordSettingUserRequest v·ªõi oldPassword = "wrongOldPassword", newPassword = "newPassword"
//   - User trong database v·ªõi m·∫≠t kh·∫©u m√£ h√≥a "encodedOldPassword"
// ƒê·∫ßu ra mong mu·ªën:
//   - N√©m Exception v·ªõi message "Wrong old password" do m·∫≠t kh·∫©u c≈© kh√¥ng kh·ªõp
    @Test
    void testUpdatePasswordSetting_ShouldThrowException_WhenOldPasswordIsIncorrect() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Gi·∫£ l·∫≠p d·ªØ li·ªáu ƒë·∫ßu v√†o
        ClientPasswordSettingUserRequest userRequest = new ClientPasswordSettingUserRequest();
        userRequest.setOldPassword("wrongOldPassword");
        userRequest.setNewPassword("newPassword");

        // Gi·∫£ l·∫≠p User t·ªìn t·∫°i v·ªõi m·∫≠t kh·∫©u m√£ h√≥a
        User existingUser = new User();
        existingUser.setUsername("testUsername");
        existingUser.setPassword("encodedOldPassword");

        when(userRepository.findByUsername("testUsername")).thenReturn(Optional.of(existingUser));
        // Gi·∫£ l·∫≠p passwordEncoder.matches tr·∫£ v·ªÅ false v√¨ m·∫≠t kh·∫©u c≈© kh√¥ng kh·ªõp
        when(passwordEncoder.matches("wrongOldPassword", "encodedOldPassword")).thenReturn(false);

        // G·ªçi ph∆∞∆°ng th·ª©c v√† ki·ªÉm tra exception
        Exception exception = assertThrows(Exception.class, () -> {
            clientUserController.updatePasswordSetting(authentication, userRequest);
        });

        assertEquals("Wrong old password", exception.getMessage());
    }

    // test case 27: N√©m IllegalArgumentException khi newPassword l√† null ho·∫∑c r·ªóng
// ƒê·∫ßu v√†o:
//   - username trong authentication: "testUsername"
//   - ClientPasswordSettingUserRequest v·ªõi oldPassword = "oldPassword"
//   - newPassword l√† null ho·∫∑c ""
// ƒê·∫ßu ra mong mu·ªën:
//   - N√©m IllegalArgumentException v·ªõi message "New password cannot be null or empty"
    @Test
    void testUpdatePasswordSetting_ShouldThrowException_WhenNewPasswordIsNullOrEmpty() {
        // Gi·∫£ l·∫≠p Authentication
        when(authentication.getName()).thenReturn("testUsername");

        // Tr∆∞·ªùng h·ª£p 1: `newPassword` l√† null
        ClientPasswordSettingUserRequest requestWithNullPassword = new ClientPasswordSettingUserRequest();
        requestWithNullPassword.setOldPassword("oldPassword");
        requestWithNullPassword.setNewPassword(null);

        Exception exception1 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePasswordSetting(authentication, requestWithNullPassword);
        });
        assertEquals("New password cannot be null or empty", exception1.getMessage());

        // Tr∆∞·ªùng h·ª£p 2: `newPassword` l√† chu·ªói r·ªóng
        ClientPasswordSettingUserRequest requestWithEmptyPassword = new ClientPasswordSettingUserRequest();
        requestWithEmptyPassword.setOldPassword("oldPassword");
        requestWithEmptyPassword.setNewPassword("");

        Exception exception2 = assertThrows(IllegalArgumentException.class, () -> {
            clientUserController.updatePasswordSetting(authentication, requestWithEmptyPassword);
        });
        assertEquals("New password cannot be null or empty", exception2.getMessage());
    }

}

